using System.Collections.Generic;
using System.IO;
using System.Linq;
using Dung.Ninja;
using Dung.Ninja.Objects;
using YamlDotNet.Serialization;
using YamlDotNet.Serialization.NamingConventions;

namespace Dung.Lib
{
    public abstract class Project : IDependency
    {
        protected Project(string rootDir)
        {
            BuildDir = Path.Join(rootDir, "build");
            if (!Directory.Exists(BuildDir)) Directory.CreateDirectory(BuildDir);
            string projectFile = Path.Join(rootDir, "project.yml");
            if (!File.Exists(projectFile)) return;
            var deserializer = new DeserializerBuilder()
                .WithNamingConvention(UnderscoredNamingConvention.Instance)
                .Build();
            Configuration = deserializer.Deserialize<Configuration.Configuration>(File.OpenText(projectFile));
        }

        protected Configuration.Configuration? Configuration { get; }
        protected abstract IDependency Entrypoint { get; }
        protected string BuildDir { get; }

        public abstract string Name { get; }


        public IEnumerable<IDependency>? Dependencies => new[]
        {
            Entrypoint
        };

        public IEnumerable<IDependency> FlattenDependencies()
        {
            return Dependencies.Concat(Dependencies.SelectMany(d => d.FlattenDependencies()));
        }

        public void WriteNinja()
        {
            var ninjaFile = Path.Join(BuildDir, "build.ninja");
            using var stream = File.Create(ninjaFile);
            using var streamWriter = new StreamWriter(stream) {AutoFlush = true};
            WriteNinja(streamWriter);
        }

        public void WriteNinja(StreamWriter writer)
        {
            List<IBuildable> buildables = FlattenDependencies().OfType<IBuildable>().ToList();

            var ninja = new NinjaSyntax(writer);
            ninja.Comment(
                "This file was generated by the dung build system. Please do not edit, as changes will be automatically overriden.");

            ninja.Newline();
            ninja.Comment("Build rules");
            foreach (Rule rule in buildables.Select(b => b.Rule).ToHashSet(new Rule.Comparer())) ninja.Rule(rule);

            ninja.Newline();
            ninja.Comment("Build artifacts");
            foreach (Build build in buildables.Select(b => b.GetBuild()).ToHashSet(new Build.Comparer()))
                ninja.Build(build);


            if (!(Entrypoint is IBuildable buildable)) return;
            ninja.Newline();
            ninja.Comment("Default artifact to build when invoked directly (without parameters)");
            ninja.Default(buildable.GetBuild());
        }
    }
}