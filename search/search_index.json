{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to x\u00e2y x\u00e2y is an easy to use build system that relies on convention over configuration to generate build files. It works with a plugin system that makes x\u00e2y easily extensible. Non-goals x\u00e2y does not pretend to be a one-size-fits-all solution. Large projects will have convoluted build systems and may not be able to fit within the conventions described below. However the author of this project believes that many projects not only can fit the conventions, but will benefit from it also. What makes x\u00e2y powerful and easy to use is also its Achille's heel: it's relative lack of configurability from its rigid conventions.","title":"Home"},{"location":"#welcome-to-xay","text":"x\u00e2y is an easy to use build system that relies on convention over configuration to generate build files. It works with a plugin system that makes x\u00e2y easily extensible.","title":"Welcome to x\u00e2y"},{"location":"#non-goals","text":"x\u00e2y does not pretend to be a one-size-fits-all solution. Large projects will have convoluted build systems and may not be able to fit within the conventions described below. However the author of this project believes that many projects not only can fit the conventions, but will benefit from it also. What makes x\u00e2y powerful and easy to use is also its Achille's heel: it's relative lack of configurability from its rigid conventions.","title":"Non-goals"},{"location":"changelog/","text":"0.1.1 (2020-05-22) Bug Fixes EMERGENCY NAMECHANGE >.< ( f1a46ba ) 0.1.0 (2020-05-21) Bug Fixes executable files lacking correct suffix on Windows ( 10e2024 ) Features add library generation option for C projects ( 51cde63 ) 0.0.1-alpha (2020-05-18) Bug Fixes placement of link args is now correct (mostly) ( 217771e ) Features add logging ( 0db2980 ) add nix packaging ( c656ce6 ) add plugin system ( 700f8b4 ) Initial commit ( 72b2d4a ) system dependencies ( 86c37a6 )","title":"Changelog"},{"location":"changelog/#011-2020-05-22","text":"","title":"0.1.1 (2020-05-22)"},{"location":"changelog/#bug-fixes","text":"EMERGENCY NAMECHANGE >.< ( f1a46ba )","title":"Bug Fixes"},{"location":"changelog/#010-2020-05-21","text":"","title":"0.1.0 (2020-05-21)"},{"location":"changelog/#bug-fixes_1","text":"executable files lacking correct suffix on Windows ( 10e2024 )","title":"Bug Fixes"},{"location":"changelog/#features","text":"add library generation option for C projects ( 51cde63 )","title":"Features"},{"location":"changelog/#001-alpha-2020-05-18","text":"","title":"0.0.1-alpha (2020-05-18)"},{"location":"changelog/#bug-fixes_2","text":"placement of link args is now correct (mostly) ( 217771e )","title":"Bug Fixes"},{"location":"changelog/#features_1","text":"add logging ( 0db2980 ) add nix packaging ( c656ce6 ) add plugin system ( 700f8b4 ) Initial commit ( 72b2d4a ) system dependencies ( 86c37a6 )","title":"Features"},{"location":"cli/","text":"CLI usage In the following section, replace xay by Dung.CLI if using binaries compiled from source. Global options -C Change directory before running the executable (unimplemented) xay Generate Ninja build files for compilation. xay build Unimplemented feature This feature is not yet implemented, but is planned and will be available on the first stable version. Generate Ninja build files and compiles the project at once. xay foreach Unimplemented feature This feature is not yet implemented, but is planned and will be available on the first stable version. Executes a command for each source file in the project. Use {} as a placeholder for the filename, ; at the end to execute one command per filename, or + to execute the command once with the list of filenames. Example : xay foreach --stdio prettier --stdin Pass the file content to stdin instead (runs one command per file) --pipe Pass the file content to stdin instead, and writes stdout back into the file (runs one command per file)","title":"CLI Usage"},{"location":"cli/#cli-usage","text":"In the following section, replace xay by Dung.CLI if using binaries compiled from source.","title":"CLI usage"},{"location":"cli/#global-options","text":"-C Change directory before running the executable (unimplemented)","title":"Global options"},{"location":"cli/#xay","text":"Generate Ninja build files for compilation.","title":"xay"},{"location":"cli/#xay-build","text":"Unimplemented feature This feature is not yet implemented, but is planned and will be available on the first stable version. Generate Ninja build files and compiles the project at once.","title":"xay build"},{"location":"cli/#xay-foreach","text":"Unimplemented feature This feature is not yet implemented, but is planned and will be available on the first stable version. Executes a command for each source file in the project. Use {} as a placeholder for the filename, ; at the end to execute one command per filename, or + to execute the command once with the list of filenames. Example : xay foreach --stdio prettier --stdin Pass the file content to stdin instead (runs one command per file) --pipe Pass the file content to stdin instead, and writes stdout back into the file (runs one command per file)","title":"xay foreach"},{"location":"configuration/","text":"Configuration file While x\u00e2y infers much of the needed configuration from conventions, project structure and content, you can override or complement configuration with a project.yml file in the project root.","title":"Configuration"},{"location":"configuration/#configuration-file","text":"While x\u00e2y infers much of the needed configuration from conventions, project structure and content, you can override or complement configuration with a project.yml file in the project root.","title":"Configuration file"},{"location":"conventions/","text":"Conventions To make using x\u00e2y simple, the project sets up a series of convention that all projects must follow. In addition, plugins may enforce further language or framework-related conventions. Global conventions One project = one public artifact x\u00e2y's convention is to keep things simple. Therefore any project corresponds to one public artifact. This can be multiple files (for example, a TypeScript projects compiles to JavaScript along with source maps and a definition file), however a project does not generate multiple artifacts. Sources in the source folder Sources files for a project will only be searched in the src folder at the root of the project. Other source files may be in subfolders, however source files outside that folder will not be included in the build. Dependencies are a tree of projects. Unimplemented feature This is an unimplemented feature as of now, but is planned to be added in the future, and will be available by the first stable release. x\u00e2y provides means to depend on other source code, provided they also are projects. This means you can easily reuse source code in different projects. Source dependencies go in the lib folder at the root of the project, with every direct dependency as a child of that folder. For example, a foo executable might have dependencies on libfoo and argparse . The directory structure will be as follows: - foo/ - src/ - main.c - lib/ - libfoo/ - include/ # Plugins can add supported directories, such as an include directory for C projects - foo.h - libs/ - <indirect dependencies> - src/ - foo.c - argparse/ - src/ -> git submodule linking to https://github.com/cofyc/argparse.git This allows x\u00e2y projects to be immediately reusable in other projects.","title":"Conventions"},{"location":"conventions/#conventions","text":"To make using x\u00e2y simple, the project sets up a series of convention that all projects must follow. In addition, plugins may enforce further language or framework-related conventions.","title":"Conventions"},{"location":"conventions/#global-conventions","text":"","title":"Global conventions"},{"location":"conventions/#one-project-one-public-artifact","text":"x\u00e2y's convention is to keep things simple. Therefore any project corresponds to one public artifact. This can be multiple files (for example, a TypeScript projects compiles to JavaScript along with source maps and a definition file), however a project does not generate multiple artifacts.","title":"One project = one public artifact"},{"location":"conventions/#sources-in-the-source-folder","text":"Sources files for a project will only be searched in the src folder at the root of the project. Other source files may be in subfolders, however source files outside that folder will not be included in the build.","title":"Sources in the source folder"},{"location":"conventions/#dependencies-are-a-tree-of-projects","text":"Unimplemented feature This is an unimplemented feature as of now, but is planned to be added in the future, and will be available by the first stable release. x\u00e2y provides means to depend on other source code, provided they also are projects. This means you can easily reuse source code in different projects. Source dependencies go in the lib folder at the root of the project, with every direct dependency as a child of that folder. For example, a foo executable might have dependencies on libfoo and argparse . The directory structure will be as follows: - foo/ - src/ - main.c - lib/ - libfoo/ - include/ # Plugins can add supported directories, such as an include directory for C projects - foo.h - libs/ - <indirect dependencies> - src/ - foo.c - argparse/ - src/ -> git submodule linking to https://github.com/cofyc/argparse.git This allows x\u00e2y projects to be immediately reusable in other projects.","title":"Dependencies are a tree of projects."},{"location":"getting-started/","text":"Getting started x\u00e2y doesn't require any dependencies to execute, but needs ninja to actually perform the build. New project In an empty directory, create a src folder. Write your source code in it. In general, make sure to adhere to x\u00e2y's conventions . If you have source code dependencies, add them to the lib folder. If you have system dependencies, add them to project.yml as follows: dependencies : - <dependency> - <dependency> - ... When ready to build, execute the command xay (or Dung.CLI if compiling from source). A build folder has been created with a Ninja build definition file. Execute ninja in the build directory to build your files. Existing project Make sure to adhere to x\u00e2y's conventions . This might require a restructure of the project. When ready to build, execute the command xay (or Dung.CLI if compiling from source). A build folder has been created with a Ninja build definition file. Execute ninja in the build directory to build your files.","title":"Getting started"},{"location":"getting-started/#getting-started","text":"x\u00e2y doesn't require any dependencies to execute, but needs ninja to actually perform the build.","title":"Getting started"},{"location":"getting-started/#new-project","text":"In an empty directory, create a src folder. Write your source code in it. In general, make sure to adhere to x\u00e2y's conventions . If you have source code dependencies, add them to the lib folder. If you have system dependencies, add them to project.yml as follows: dependencies : - <dependency> - <dependency> - ... When ready to build, execute the command xay (or Dung.CLI if compiling from source). A build folder has been created with a Ninja build definition file. Execute ninja in the build directory to build your files.","title":"New project"},{"location":"getting-started/#existing-project","text":"Make sure to adhere to x\u00e2y's conventions . This might require a restructure of the project. When ready to build, execute the command xay (or Dung.CLI if compiling from source). A build folder has been created with a Ninja build definition file. Execute ninja in the build directory to build your files.","title":"Existing project"},{"location":"plugins/","text":"Plugins x\u00e2y doesn't come with any language or framework-related features. However, a number of plugins are officially supported and come bundled with the project: C projects JavaScript/TypeScript projects with Rome (unimplemented) Plugin paths x\u00e2y looks for plugin assemblies in any of these folders: $DUNG_CLI_PLUGIN_PATH if it exists $XDG_DATA_HOME/xay/plugins or, if XDG_DATA_HOME isn't found, $HOME/.xay/plugins x\u00e2y's executable folder The search is recursive through subfolders. Using plugins Each plugin is queried for whether it can detect a project. The first plugin to do so gets used. In the future, the user can be asked which plugin it wants used in the case several plugins detect a project. Types of plugins Plugins in x\u00e2y come in different types; build plugins detect whether a language or framework is present in the project, and extension plugins can run arbitrary code on hooks (i.e. to add additional dependencies to the project).","title":"Plugins"},{"location":"plugins/#plugins","text":"x\u00e2y doesn't come with any language or framework-related features. However, a number of plugins are officially supported and come bundled with the project: C projects JavaScript/TypeScript projects with Rome (unimplemented)","title":"Plugins"},{"location":"plugins/#plugin-paths","text":"x\u00e2y looks for plugin assemblies in any of these folders: $DUNG_CLI_PLUGIN_PATH if it exists $XDG_DATA_HOME/xay/plugins or, if XDG_DATA_HOME isn't found, $HOME/.xay/plugins x\u00e2y's executable folder The search is recursive through subfolders.","title":"Plugin paths"},{"location":"plugins/#using-plugins","text":"Each plugin is queried for whether it can detect a project. The first plugin to do so gets used. In the future, the user can be asked which plugin it wants used in the case several plugins detect a project.","title":"Using plugins"},{"location":"plugins/#types-of-plugins","text":"Plugins in x\u00e2y come in different types; build plugins detect whether a language or framework is present in the project, and extension plugins can run arbitrary code on hooks (i.e. to add additional dependencies to the project).","title":"Types of plugins"}]}